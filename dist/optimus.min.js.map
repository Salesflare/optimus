{"version":3,"file":"optimus.min.js","sources":["../lib/transformer.js"],"sourcesContent":["'use strict';\n\nconst internals = {\n    transformers: [\n        /**\n         *\n         * @param {Object} rule\n         * @param {String} rule.id\n         * @param {String} rule.operator\n         * @param {any | any[]} rule.value\n         * @returns {Object} rule\n         */\n        function personType(rule) {\n\n            if (rule.id === 'person-customer.customers' || rule.id === 'person-contact.my-contacts') {\n                return {\n                    id: 'person-type.id',\n                    entity: 'person',\n                    input: 'multiselect',\n                    label: 'Type',\n                    operator: 'in',\n                    type: 'integer',\n                    value: [rule.id === 'person-customer.customers' ? 2 : 1]\n                };\n            }\n\n            return rule;\n        }\n    ]\n};\n\n/**\n * Transform filter object from older version to newest version\n *\n * @param {Object} filtersObject\n * @param {Object[]} filtersObject.rules\n * @returns {Object} transformed filter object\n */\nexports.transform = internals.transform = (filtersObject) => {\n\n    const transformed = { ...filtersObject };\n    internals.transformers.forEach((transformer) => {\n\n        transformed.rules = transformed.rules.map(transformer);\n    });\n\n    return transformed;\n};\n"],"names":["internals","transformers","rule","id","entity","input","label","operator","type","value","transform","filtersObject","transformed","forEach","transformer","rules","map"],"mappings":"6JAEA,IAAMA,EAAY,CACdC,aAAc,UASUC,SAEA,8BAAZA,EAAKC,IAAkD,+BAAZD,EAAKC,GACzC,CACHA,GAAI,iBACJC,OAAQ,SACRC,MAAO,cACPC,MAAO,OACPC,SAAU,KACVC,KAAM,UACNC,MAAO,CAAa,8BAAZP,EAAKC,GAAqC,EAAI,IAIvDD,OAYCF,EAAUU,UAAY,SAACC,OAEjCC,wUAAmBD,UACzBX,EAAUC,aAAaY,QAAQ,SAACC,GAE5BF,EAAYG,MAAQH,EAAYG,MAAMC,IAAIF,KAGvCF"}