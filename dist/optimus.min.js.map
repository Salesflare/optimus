{"version":3,"file":"optimus.min.js","sources":["../lib/transformer.js"],"sourcesContent":["// @ts-check\n'use strict';\n\n/**\n * @typedef {Object} Rule\n * @property {String} Rule.id\n * @property {String} [Rule.query_builder_id]\n * @property {String | OperatorObject} Rule.operator\n * @property {any | any[]} Rule.value\n * @property {String} [Rule.display_entity]\n * @property {String} [Rule.entity]\n * @property {String} [Rule.input]\n * @property {String} [Rule.label]\n * @property {String} [Rule.type]\n * @property {any | any[]} [Rule.value1]\n * @property {any | any[]} [Rule.value2]\n */\n\n/**\n * @typedef {Object} Filter\n * @property {(Rule|Filter)[]} [Filter.rules]\n * @property {String} [Filter.condition]\n */\n\n/**\n  * Deprecated operator object that was used in earlier advanced filter versions\n  * Has been replaced by a single string\n  * @typedef {Object} OperatorObject\n  * @property {String} key\n  * @property {String} value\n  */\n\nconst internals = {\n    transformers: [\n        /**\n         *\n         * @param {Rule} rule\n         * @returns {Rule} rule\n         */\n        function personType(rule) {\n\n            if (rule.id === 'person-customer.customers' || rule.id === 'person-contact.my-contacts') {\n                return {\n                    id: 'person-type.id',\n                    entity: 'person',\n                    input: 'multiselect',\n                    label: 'Type',\n                    operator: 'in',\n                    type: 'integer',\n                    value: [rule.id === 'person-customer.customers' ? 2 : 1]\n                };\n            }\n\n            return rule;\n        },\n        /**\n         *\n         * @param {Rule} rule\n         * @returns {Rule} rule\n         */\n        function booleanOperator(rule) {\n\n            const operatorTransformations = {\n                'is_empty': {\n                    operator: 'equal',\n                    value: ['null']\n                },\n                'is_not_empty': {\n                    operator: 'not_equal',\n                    value: ['null']\n                },\n                'is_null': {\n                    operator: 'equal',\n                    value: ['null']\n                },\n                'is_not_null': {\n                    operator: 'not_equal',\n                    value: ['null']\n                },\n                'true': {\n                    operator: 'equal',\n                    value: ['true']\n                },\n                'false': {\n                    operator: 'equal',\n                    value: ['false']\n                }\n            };\n\n            // The operator could still be an object, used in earlier versions of advanced filters\n            const operatorString = rule.operator && /**@type {OperatorObject} */(rule.operator).key ? /**@type {OperatorObject} */(rule.operator).key : /**@type {String} */(rule.operator) || '';\n\n            if (Object.keys(operatorTransformations).includes(operatorString)) {\n                const matchedTransform = operatorTransformations[operatorString];\n                rule.operator = matchedTransform.operator;\n                rule.value = matchedTransform.value;\n            }\n\n            return rule;\n        },\n        /**\n         *\n         * @param {Rule} rule\n         * @returns {Rule} rule\n         */\n        function transformValuesForBetweenOperator(rule) {\n\n            if (rule.operator === 'between' || rule.operator === 'not_between') {\n                let value1;\n                let value2;\n\n                // Able to handle client and server side\n                if (rule.value !== undefined && rule.value[0] !== undefined\n                    && (rule.value[0].value1 !== undefined || rule.value[0].value2 !== undefined)) {\n\n                    value1 = rule.value[0].value1;\n                    value2 = rule.value[0].value2;\n                    delete rule.value[0].value1;\n                    delete rule.value[0].value2;\n                }\n                else {\n                    value1 = rule.value1;\n                    value2 = rule.value2;\n                    delete rule.value1;\n                    delete rule.value2;\n                }\n\n                // Depending on the current values, we reformat the values a certain way\n                if (value1 !== undefined && value1 !== null\n                    && value2 !== undefined && value2 !== null) {\n\n                    rule.value = [value1,value2];\n                }\n                else if ((value1 === undefined && value2 === undefined)) {\n                    // The original values are already accepted\n                    return rule;\n                }\n                else {\n                    rule.value = [];\n                }\n            }\n\n            return rule;\n        },\n        /**\n         *\n         * @param {Rule} rule\n         * @returns {Rule} rule\n         */\n        function transformCampaignRules(rule) {\n\n            if (rule.display_entity === 'Campaign' && rule.entity === 'person') {\n                rule.entity = 'campaign';\n            }\n\n            return rule;\n\n        },\n        /**\n         * @param {Rule} rule\n         * @returns {Rule} rule\n         */\n        function queryBuilderId(rule) {\n\n            if (rule.entity && !rule.query_builder_id) {\n                rule.query_builder_id = rule.id;\n            }\n\n            return rule;\n        },\n        /**\n         *\n         * @param {Rule} rule\n         * @returns {Rule} rule\n         */\n        function fixCustomId(rule) {\n\n            if (rule.id.startsWith('count custom.')) {\n                rule.id = `count ${rule.id.split(/ (.*)/)[1].replace(/ /g, '_').toLowerCase()}`;\n            }\n\n            if (rule.id.startsWith('custom.')) {\n                rule.id = rule.id.replace(/ /g, '_').toLowerCase();\n            }\n\n            if (rule.entity) {\n                rule.query_builder_id = rule.id;\n            }\n\n            return rule;\n        }\n    ]\n};\n\n/**\n * Transform filter object from older version to newest version\n *\n * @param {Filter} filtersObject\n * @param {(Rule|Filter)[]} filtersObject.rules\n * @returns {Filter} transformed filter object\n */\nexports.transform = internals.transform = (filtersObject) => {\n\n    const transformed = { ...filtersObject };\n\n    internals.transformers.forEach((transformer) => {\n\n        transformed.rules = transformed.rules.map((ruleObject) => {\n\n            /** @type {Filter} */\n            const filterObject = (ruleObject);\n            /** @type {Rule} */\n            const ruleObjectCast = (ruleObject);\n\n            if ((filterObject.rules === undefined\n                || filterObject.condition === undefined )\n            && ruleObjectCast.id === undefined) {\n\n                // This should never happen\n                throw new Error('Invalid filter object');\n            }\n            else if (ruleObjectCast.id === undefined) {\n                return internals.transform(ruleObject);\n            }\n\n            return transformer(/** @type {Rule} */(ruleObject));\n        });\n    });\n\n    return transformed;\n};\n"],"names":["internals","transformers","rule","id","entity","input","label","operator","type","value","operatorTransformations","operatorString","key","Object","keys","includes","matchedTransform","value1","value2","undefined","display_entity","query_builder_id","startsWith","split","replace","toLowerCase","transform","filtersObject","transformed","forEach","transformer","rules","map","ruleObject","filterObject","ruleObjectCast","condition","Error"],"mappings":"6JAgCA,IAAMA,EAAY,CACdC,aAAc,UAMUC,SAEA,8BAAZA,EAAKC,IAAkD,+BAAZD,EAAKC,GACzC,CACHA,GAAI,iBACJC,OAAQ,SACRC,MAAO,cACPC,MAAO,OACPC,SAAU,KACVC,KAAM,UACNC,MAAO,CAAa,8BAAZP,EAAKC,GAAqC,EAAI,IAIvDD,YAOcA,OAEfQ,EAA0B,UAChB,CACRH,SAAU,QACVE,MAAO,CAAC,sBAEI,CACZF,SAAU,YACVE,MAAO,CAAC,iBAED,CACPF,SAAU,QACVE,MAAO,CAAC,qBAEG,CACXF,SAAU,YACVE,MAAO,CAAC,cAEJ,CACJF,SAAU,QACVE,MAAO,CAAC,eAEH,CACLF,SAAU,QACVE,MAAO,CAAC,WAKVE,EAAiBT,EAAKK,UAAyCL,EAAKK,SAAUK,IAAmCV,EAAKK,SAAUK,IAA2BV,EAAKK,UAAa,MAE/KM,OAAOC,KAAKJ,GAAyBK,SAASJ,GAAiB,KACzDK,EAAmBN,EAAwBC,GACjDT,EAAKK,SAAWS,EAAiBT,SACjCL,EAAKO,MAAQO,EAAiBP,aAG3BP,YAOgCA,OAG/Be,EACAC,KAFc,YAAlBhB,EAAKK,UAA4C,gBAAlBL,EAAKK,iBAKjBY,IAAfjB,EAAKO,YAAyCU,IAAlBjB,EAAKO,MAAM,SACVU,IAAzBjB,EAAKO,MAAM,GAAGQ,aAAiDE,IAAzBjB,EAAKO,MAAM,GAAGS,QAQxDD,EAASf,EAAKe,OACdC,EAAShB,EAAKgB,cACPhB,EAAKe,cACLf,EAAKgB,SATZD,EAASf,EAAKO,MAAM,GAAGQ,OACvBC,EAAShB,EAAKO,MAAM,GAAGS,cAChBhB,EAAKO,MAAM,GAAGQ,cACdf,EAAKO,MAAM,GAAGS,QAUrBD,MAAAA,GAAAA,MACGC,EAEHhB,EAAKO,MAAQ,CAACQ,EAAOC,OAEpB,CAAA,QAAgBC,IAAXF,QAAmCE,IAAXD,SAEvBhB,EAGPA,EAAKO,MAAQ,UAIdP,YAOqBA,SAEA,aAAxBA,EAAKkB,gBAAiD,WAAhBlB,EAAKE,SAC3CF,EAAKE,OAAS,YAGXF,YAOaA,UAEhBA,EAAKE,SAAWF,EAAKmB,mBACrBnB,EAAKmB,iBAAmBnB,EAAKC,IAG1BD,YAOUA,UAEbA,EAAKC,GAAGmB,WAAW,mBACnBpB,EAAKC,mBAAcD,EAAKC,GAAGoB,MAAM,SAAS,GAAGC,QAAQ,KAAM,KAAKC,gBAGhEvB,EAAKC,GAAGmB,WAAW,aACnBpB,EAAKC,GAAKD,EAAKC,GAAGqB,QAAQ,KAAM,KAAKC,eAGrCvB,EAAKE,SACLF,EAAKmB,iBAAmBnB,EAAKC,IAG1BD,OAYCF,EAAU0B,UAAY,SAACC,OAEjCC,wUAAmBD,UAEzB3B,EAAUC,aAAa4B,QAAQ,SAACC,GAE5BF,EAAYG,MAAQH,EAAYG,MAAMC,IAAI,SAACC,OAGjCC,EAAgBD,EAEhBE,EAAkBF,WAEId,IAAvBe,EAAaH,YACgBZ,IAA3Be,EAAaE,iBACKjB,IAAtBgB,EAAehC,SAGR,IAAIkC,MAAM,yBAEf,YAA0BlB,IAAtBgB,EAAehC,GACbH,EAAU0B,UAAUO,GAGxBH,EAAgCG,OAIxCL"}