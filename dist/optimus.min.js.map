{"version":3,"file":"optimus.min.js","sources":["../lib/transformer.js"],"sourcesContent":["// @ts-check\n'use strict';\n\n/**\n * @typedef {Object} Rule\n * @property {String} id\n * @property {String} [query_builder_id]\n * @property {String | OperatorObject} operator\n * @property {any | any[]} value\n * @property {String} [display_entity]\n * @property {String} [entity]\n * @property {String} [input]\n * @property {String} [label]\n * @property {String} [type]\n * @property {any | any[]} [value1]\n * @property {any | any[]} [value2]\n */\n\n/**\n * @typedef {Object} Filter\n * @property {(Rule|Filter)[]} [rules]\n * @property {String} [condition]\n */\n\n/**\n * Deprecated operator object that was used in earlier advanced filter versions\n * Has been replaced by a single string\n *\n * @typedef {Object} OperatorObject\n * @property {String} key\n * @property {String} value\n */\n\nconst internals = {\n    oldFilterIds: new Map([\n        ['person.id', 'contact.id'],\n        ['position.role', 'contact.position.role'],\n        ['account-contact.account', 'contact.account.id'],\n        ['person.firstname', 'contact.firstname'],\n        ['person.lastname', 'contact.lastname'],\n        ['person.name', 'contact.name'],\n        ['person.prefix', 'contact.prefix'],\n        ['person.suffix', 'contact.suffix'],\n        ['person.middle', 'contact.middle'],\n        ['person.email', 'contact.email'],\n        ['person.modification_date', 'contact.modification_date'],\n        ['person.creation_date', 'contact.creation_date'],\n        // ['person-chat.client', 'person-chat.client'],\n        ['person-chat.handle', 'contact.skype'],\n        ['person-phone_number.normalized_number', 'contact.phone_number.number'],\n        ['person-social_profile.username', 'contact.social_profile.username'],\n        ['person-social_profile.type', 'contact.social_profile.type'],\n        ['person-social_profile.url', 'contact.social_profile.url'],\n        ['person-tag.id', 'contact.tag.id'],\n        ['person-address.city', 'contact.address.city'],\n        ['person-address.country', 'contact.address.country'],\n        ['person-address.state_region', 'contact.address.state_region'],\n        ['person-type.id', 'contact.type'],\n        ['campaign.id', 'campaign.id'],\n        ['campaign.name', 'campaign.name'],\n        ['campaign-email.sent_status', 'campaign.received'],\n        ['email_open.id', 'campaign.opened'],\n        ['interactiongroup.id', 'campaign.clicked'],\n        ['campaign.creator', 'campaign.created_by.id'],\n        ['campaign.type', 'campaign.type'],\n        ['campaign.status', 'campaign.status'],\n        ['count campaign_email', 'campaign.count'],\n        ['account.name', 'account.name'],\n        ['account.hotness', 'account.hotness'],\n        ['account.size', 'account.size'],\n        ['account.owner', 'account.owner.id'],\n        ['account.website', 'account.website'],\n        ['account.description', 'account.description'],\n        ['account.last_interaction_date', 'account.last_interaction_date'],\n        ['account.creation_date', 'account.creation_date'],\n        ['account-email_address.email', 'account.email_address.email'],\n        ['account-phone_number.normalized_number', 'account.phone_number.number'],\n        ['account-social_profile.username', 'account.social_profile.username'],\n        ['account-social_profile.type', 'account.social_profile.type'],\n        ['account-social_profile.url', 'account.social_profile.url'],\n        ['account-user.user', 'account.team_member.id'],\n        ['account-contact.contact', 'account.contact.id'],\n        ['account-tag.id', 'account.tag.id'],\n        ['account-address.city', 'account.address.city'],\n        ['account-address.country', 'account.address.country'],\n        ['account-address.state_region', 'account.address.state_region'],\n        ['count account_contact', 'account.contact.count'],\n        ['count opportunity', 'account.opportunity.count'],\n        ['count task', 'account.task.count'],\n        ['opportunity.account', 'opportunity.account.id'],\n        ['opportunity.owner', 'opportunity.owner.id'],\n        ['opportunity.creator', 'opportunity.created_by.id'],\n        ['opportunity.assignee', 'opportunity.assignee.id'],\n        ['opportunity.stage', 'opportunity.stage.id'],\n        ['opportunity.value', 'opportunity.value'],\n        ['opportunity.close_date', 'opportunity.close_date'],\n        ['pipeline.id', 'opportunity.pipeline.id'],\n        ['opportunity.name', 'opportunity.name'],\n        ['opportunity.frequency', 'opportunity.frequency'],\n        ['opportunity.units', 'opportunity.units'],\n        ['opportunity.contract_start_date', 'opportunity.contract_start_date'],\n        ['opportunity.contract_end_date', 'opportunity.contract_end_date'],\n        ['opportunity.recurring_price_per_unit', 'opportunity.recurring_price_per_unit'],\n        ['opportunity.closed', 'opportunity.closed'],\n        ['opportunity.creation_date', 'opportunity.creation_date'],\n        ['opportunity-tag.id', 'opportunity.tag.id'],\n        ['opportunity.done', 'opportunity.done'],\n        ['campaign.name', 'campaign.name'],\n        ['campaign.subject', 'campaign.subject'],\n        ['campaign.body', 'campaign.body'],\n        ['campaign.creator', 'campaign.created_by.id'],\n        ['campaign.type', 'campaign.type'],\n        ['campaign.schedule_date', 'campaign.schedule_date'],\n        ['campaign.status', 'campaign.status'],\n        ['campaign.creation_date', 'campaign.creation_date'],\n        ['calculated emails_sent', 'campaign.total_sent'],\n        ['calculated emails_opened', 'campaign.total_opened'],\n        ['calculated emails_clicked', 'campaign.total_clicked'],\n        ['campaign-opened.contact', 'campaign.opened_by.id'],\n        ['campaign-clicked.contact', 'campaign.clicked_by.id'],\n        ['campaign_email.contact', 'campaign.contact.id'],\n        ['task.type', 'task.type'],\n        ['task.account', 'task.account.id'],\n        ['task.creator', 'task.created_by.id'],\n        ['task.reminder_date', 'task.reminder_date'],\n        ['task.completed', 'task.completed'],\n        ['task.completion_date', 'task.completion_date'],\n        ['task.completor', 'task.completed_by'],\n        ['task.creation_date', 'task.creation_date'],\n        ['task_assignee.assignee', 'task.assignee.id'],\n        ['task.description', 'task.description']\n    ]),\n    transformers: [\n        /**\n         *\n         * @param {Rule} rule\n         * @returns {Rule} rule\n         */\n        function personType(rule) {\n\n            if (rule.id === 'person-customer.customers' || rule.id === 'person-contact.my-contacts') {\n                return {\n                    id: 'person-type.id',\n                    entity: 'person',\n                    input: 'multiselect',\n                    label: 'Type',\n                    operator: 'in',\n                    type: 'integer',\n                    value: [rule.id === 'person-customer.customers' ? 2 : 1]\n                };\n            }\n\n            return rule;\n        },\n        /**\n         *\n         * @param {Rule} rule\n         * @returns {Rule} rule\n         */\n        function booleanOperator(rule) {\n\n            const operatorTransformations = {\n                'is_empty': {\n                    operator: 'equal',\n                    value: ['null']\n                },\n                'is_not_empty': {\n                    operator: 'not_equal',\n                    value: ['null']\n                },\n                'is_null': {\n                    operator: 'equal',\n                    value: ['null']\n                },\n                'is_not_null': {\n                    operator: 'not_equal',\n                    value: ['null']\n                },\n                'true': {\n                    operator: 'equal',\n                    value: ['true']\n                },\n                'false': {\n                    operator: 'equal',\n                    value: ['false']\n                }\n            };\n\n            // The operator could still be an object, used in earlier versions of advanced filters\n            const operatorString = rule.operator && /**@type {OperatorObject} */(rule.operator).key ? /**@type {OperatorObject} */(rule.operator).key : /**@type {String} */(rule.operator) || '';\n\n            if (Object.keys(operatorTransformations).includes(operatorString)) {\n                const matchedTransform = operatorTransformations[operatorString];\n                rule.operator = matchedTransform.operator;\n                rule.value = matchedTransform.value;\n            }\n\n            return rule;\n        },\n        /**\n         *\n         * @param {Rule} rule\n         * @returns {Rule} rule\n         */\n        function transformValuesForBetweenOperator(rule) {\n\n            if (rule.operator === 'between' || rule.operator === 'not_between') {\n                let value1;\n                let value2;\n\n                // Able to handle client and server side\n                if (rule.value !== undefined && rule.value[0] !== undefined\n                    && (rule.value[0].value1 !== undefined || rule.value[0].value2 !== undefined)) {\n\n                    value1 = rule.value[0].value1;\n                    value2 = rule.value[0].value2;\n                    delete rule.value[0].value1;\n                    delete rule.value[0].value2;\n                }\n                else {\n                    value1 = rule.value1;\n                    value2 = rule.value2;\n                    delete rule.value1;\n                    delete rule.value2;\n                }\n\n                // Depending on the current values, we reformat the values a certain way\n                if (value1 !== undefined && value1 !== null\n                    && value2 !== undefined && value2 !== null) {\n\n                    rule.value = [value1,value2];\n                }\n                else if ((value1 === undefined && value2 === undefined)) {\n                    // The original values are already accepted\n                    return rule;\n                }\n                else {\n                    rule.value = [];\n                }\n            }\n\n            return rule;\n        },\n        /**\n         *\n         * @param {Rule} rule\n         * @returns {Rule} rule\n         */\n        function transformCampaignRules(rule) {\n\n            if (rule.display_entity === 'Campaign' && rule.entity === 'person') {\n                rule.entity = 'campaign';\n            }\n\n            return rule;\n\n        },\n        /**\n         * @param {Rule} rule\n         * @returns {Rule} rule\n         */\n        function queryBuilderId(rule) {\n\n            if (rule.entity && !rule.query_builder_id) {\n                if (internals.oldFilterIds.get(rule.id)\n                    || rule.id.startsWith('count custom.')\n                    || rule.id.startsWith('custom.')\n                ) {\n                    rule.query_builder_id = rule.id;\n                }\n            }\n\n            return rule;\n        },\n        /**\n         *\n         * @param {Rule} rule\n         * @returns {Rule} rule\n         */\n        function fixCustomId(rule) {\n\n            if (rule.id.startsWith('count custom.')) {\n                rule.id = `count ${rule.id.split(/ (.*)/)[1].replace(/ /g, '_').toLowerCase()}`;\n            }\n\n            if (rule.id.startsWith('custom.')) {\n                rule.id = rule.id.replace(/ /g, '_').toLowerCase();\n            }\n\n            if (rule.entity) {\n                if (internals.oldFilterIds.get(rule.id)\n                    || rule.id.startsWith('count custom.')\n                    || rule.id.startsWith('custom.')\n                ) {\n                    rule.query_builder_id = rule.id;\n                }\n            }\n\n            return rule;\n        },\n        /**\n         * The function needs to transform rules that have the new format but still have an old rule id.\n         *\n         * @param {Rule} rule\n         * @returns {Rule} rule\n         */\n        function transformOldIds(rule) {\n\n\n            if (!rule.entity && !rule.query_builder_id) {\n                const newId = internals.oldFilterIds.get(rule.id);\n\n                if (newId !== undefined) {\n                    rule.id = newId;\n                }\n            }\n            else if (!rule.entity) {\n                // This should never happen\n                throw new Error('Invalid filter object');\n            }\n\n            return rule;\n        },\n        function transformCampaignMailSentStatus(rule) {\n\n            if (rule.id === 'campaign.received' && rule.type === 'boolean' && Array.isArray(rule.value)) {\n\n                if (rule.value[0] === 'true') {\n                    rule.value = 'sent';\n                }\n                else if (rule.value[0] === 'false') {\n                    rule.value = 'not_sent';\n                }\n                else {\n                    return rule;\n                }\n\n                rule.type = 'text';\n                rule.operator = 'equal';\n            }\n\n            return rule;\n        },\n        function transformForFullyNegated(rule) {\n\n            if (\n                rule.id === 'campaign.clicked' || rule.id === 'workflow.send_email.clicked'\n                || rule.id === 'campaign.opened' || rule.id === 'workflow.send_email.opened'\n                || rule.id === 'workflow.entered' || rule.id === 'tag.used' || rule.id === 'tag.automated'\n            ) {\n                if (Array.isArray(rule.value) && rule.value[0]) {\n                    if (rule.value[0] === 'true') {\n                        rule.operator = 'not_equal';\n                        rule.value[0] = 'null';\n                    }\n                    else if (rule.value[0] === 'false') {\n                        rule.value[0] = 'null';\n                    }\n                }\n            }\n\n            return rule;\n        },\n        function transformEqualToIsForNull(rule) {\n            // Transform 'equal' rules with null to 'is' rules\n            if (rule.operator === 'equal' || rule.operator === 'not_equal') {\n                if (Array.isArray(rule.value) && rule.value[0] === 'null') {\n                    rule.operator = rule.operator === 'equal' ? 'is' : 'is_not';\n                }\n            }\n\n            return rule;\n        }\n    ]\n};\n\n/**\n * Transform filter object from older version to newest version\n *\n * @param {Filter} filtersObject\n * @param {(Rule|Filter)[]} filtersObject.rules\n * @returns {Filter} transformed filter object\n */\nexports.transform = internals.transform = (filtersObject) => {\n\n    if (!filtersObject || !filtersObject.rules) {\n        return filtersObject;\n    }\n\n    const transformed = { ...filtersObject };\n\n    internals.transformers.forEach((transformer) => {\n\n        transformed.rules = transformed.rules.map((ruleObject) => {\n\n            /** @type {Filter} */\n            const filterObject = (ruleObject);\n            /** @type {Rule} */\n            const ruleObjectCast = (ruleObject);\n\n            if (\n                (filterObject.rules === undefined || filterObject.condition === undefined )\n                && ruleObjectCast.id === undefined\n            ) {\n\n                // This should never happen\n                throw new Error('Invalid filter object');\n            }\n            else if (ruleObjectCast.id === undefined) {\n                return internals.transform(ruleObject);\n            }\n\n            return transformer(/** @type {Rule} */(ruleObject));\n        });\n    });\n\n    return transformed;\n};\n"],"names":["internals","oldFilterIds","Map","transformers","rule","id","entity","input","label","operator","type","value","operatorTransformations","is_empty","is_not_empty","is_null","is_not_null","true","false","operatorString","key","Object","keys","includes","matchedTransform","value1","value2","undefined","display_entity","query_builder_id","get","startsWith","split","replace","toLowerCase","Error","newId","Array","isArray","transform","filtersObject","rules","transformed","forEach","transformer","map","ruleObject","filterObject","ruleObjectCast","condition"],"mappings":"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"}